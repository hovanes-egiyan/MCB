//
// File generated by rootcint at Thu May 12 11:31:50 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIhovanesdIGlueXdIMCBdIsrcdIdictMCBInp
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "dictMCBInp.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TUserMCBInp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TUserMCBInp(void *p = 0);
   static void *newArray_TUserMCBInp(Long_t size, void *p);
   static void delete_TUserMCBInp(void *p);
   static void deleteArray_TUserMCBInp(void *p);
   static void destruct_TUserMCBInp(void *p);
   static void streamer_TUserMCBInp(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TUserMCBInp*)
   {
      ::TUserMCBInp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TUserMCBInp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TUserMCBInp", ::TUserMCBInp::Class_Version(), "/home/hovanes/GlueX/MCB/src/TUserMCBInp.h", 6,
                  typeid(::TUserMCBInp), DefineBehavior(ptr, ptr),
                  &::TUserMCBInp::Dictionary, isa_proxy, 0,
                  sizeof(::TUserMCBInp) );
      instance.SetNew(&new_TUserMCBInp);
      instance.SetNewArray(&newArray_TUserMCBInp);
      instance.SetDelete(&delete_TUserMCBInp);
      instance.SetDeleteArray(&deleteArray_TUserMCBInp);
      instance.SetDestructor(&destruct_TUserMCBInp);
      instance.SetStreamerFunc(&streamer_TUserMCBInp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TUserMCBInp*)
   {
      return GenerateInitInstanceLocal((::TUserMCBInp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TUserMCBInp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr TUserMCBInp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TUserMCBInp::Class_Name()
{
   return "TUserMCBInp";
}

//______________________________________________________________________________
const char *TUserMCBInp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TUserMCBInp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TUserMCBInp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TUserMCBInp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TUserMCBInp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TUserMCBInp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TUserMCBInp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TUserMCBInp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TUserMCBInp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TUserMCBInp.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((char*)bremsprocs);
      R__b >> Zcry;
      R__b >> Zamo;
      R__b >> thickn_dia;
      R__b >> thickn_amo;
      R__b >> Theta;
      R__b >> Alpha;
      R__b >> Phi;
      R__b >> E0;
      R__b >> sigE0;
      R__b >> sigx;
      R__b >> sigy;
      R__b >> sigpx;
      R__b >> sigpy;
      R__b >> coldist;
      R__b >> collength;
      R__b >> col1;
      R__b >> col2;
      R__b >> coloff_x;
      R__b >> coloff_y;
      R__b >> KLMax;
      R__b >> temperature;
      R__b >> IntTot;
      R__b.CheckByteCount(R__s, R__c, TUserMCBInp::IsA());
   } else {
      R__c = R__b.WriteVersion(TUserMCBInp::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(bremsprocs, 5);
      R__b << Zcry;
      R__b << Zamo;
      R__b << thickn_dia;
      R__b << thickn_amo;
      R__b << Theta;
      R__b << Alpha;
      R__b << Phi;
      R__b << E0;
      R__b << sigE0;
      R__b << sigx;
      R__b << sigy;
      R__b << sigpx;
      R__b << sigpy;
      R__b << coldist;
      R__b << collength;
      R__b << col1;
      R__b << col2;
      R__b << coloff_x;
      R__b << coloff_y;
      R__b << KLMax;
      R__b << temperature;
      R__b << IntTot;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TUserMCBInp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TUserMCBInp.
      TClass *R__cl = ::TUserMCBInp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bremsprocs[5]", bremsprocs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zcry", &Zcry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zamo", &Zamo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thickn_dia", &thickn_dia);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thickn_amo", &thickn_amo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Theta", &Theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Alpha", &Alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E0", &E0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigE0", &sigE0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigx", &sigx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigy", &sigy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigpx", &sigpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigpy", &sigpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coldist", &coldist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "collength", &collength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "col1", &col1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "col2", &col2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coloff_x", &coloff_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coloff_y", &coloff_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "KLMax", &KLMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature", &temperature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntTot", &IntTot);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TUserMCBInp(void *p) {
      return  p ? new(p) ::TUserMCBInp : new ::TUserMCBInp;
   }
   static void *newArray_TUserMCBInp(Long_t nElements, void *p) {
      return p ? new(p) ::TUserMCBInp[nElements] : new ::TUserMCBInp[nElements];
   }
   // Wrapper around operator delete
   static void delete_TUserMCBInp(void *p) {
      delete ((::TUserMCBInp*)p);
   }
   static void deleteArray_TUserMCBInp(void *p) {
      delete [] ((::TUserMCBInp*)p);
   }
   static void destruct_TUserMCBInp(void *p) {
      typedef ::TUserMCBInp current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TUserMCBInp(TBuffer &buf, void *obj) {
      ((::TUserMCBInp*)obj)->::TUserMCBInp::Streamer(buf);
   }
} // end of namespace ROOT for class ::TUserMCBInp

/********************************************************
* /home/hovanes/GlueX/MCB/src/dictMCBInp.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtabledictMCBInp();

extern "C" void G__set_cpp_environmentdictMCBInp() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/hovanes/GlueX/MCB/src/TUserMCBInp.h");
  G__cpp_reset_tagtabledictMCBInp();
}
#include <new>
extern "C" int G__cpp_dllrevdictMCBInp() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TUserMCBInp */
static int G__dictMCBInp_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TUserMCBInp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TUserMCBInp[n];
     } else {
       p = new((void*) gvp) TUserMCBInp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TUserMCBInp;
     } else {
       p = new((void*) gvp) TUserMCBInp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TUserMCBInp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TUserMCBInp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TUserMCBInp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TUserMCBInp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TUserMCBInp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TUserMCBInp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TUserMCBInp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TUserMCBInp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictMCBInp_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TUserMCBInp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dictMCBInp_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TUserMCBInp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TUserMCBInp(*(TUserMCBInp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TUserMCBInp G__TTUserMCBInp;
static int G__dictMCBInp_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TUserMCBInp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TUserMCBInp*) (soff+(sizeof(TUserMCBInp)*i)))->~G__TTUserMCBInp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TUserMCBInp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TUserMCBInp*) (soff))->~G__TTUserMCBInp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dictMCBInp_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TUserMCBInp* dest = (TUserMCBInp*) G__getstructoffset();
   *dest = *(TUserMCBInp*) libp->para[0].ref;
   const TUserMCBInp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TUserMCBInp */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdictMCBInp {
 public:
  G__Sizep2memfuncdictMCBInp(): p(&G__Sizep2memfuncdictMCBInp::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdictMCBInp::*p)();
};

size_t G__get_sizep2memfuncdictMCBInp()
{
  G__Sizep2memfuncdictMCBInp a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedictMCBInp() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp))) {
     TUserMCBInp *G__Lderived;
     G__Lderived=(TUserMCBInp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp),G__get_linked_tagnum(&G__dictMCBInpLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledictMCBInp() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictMCBInpLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictMCBInpLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictMCBInpLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictMCBInpLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TUserMCBInp */
static void G__setup_memvarTUserMCBInp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp));
   { TUserMCBInp *p; p=(TUserMCBInp*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->bremsprocs)-(long)(p)),99,0,0,-1,-1,-1,1,"bremsprocs[5]=",0,"amo,inC,inR,ihb,sum,dif");
   G__memvar_setup((void*)((long)(&p->Zcry)-(long)(p)),100,0,0,-1,-1,-1,1,"Zcry=",0,"charge number of crystal");
   G__memvar_setup((void*)((long)(&p->Zamo)-(long)(p)),100,0,0,-1,-1,-1,1,"Zamo=",0,"charge number of amorphous foil");
   G__memvar_setup((void*)((long)(&p->thickn_dia)-(long)(p)),100,0,0,-1,-1,-1,1,"thickn_dia=",0,"radiator thickness diamond in [mm]");
   G__memvar_setup((void*)((long)(&p->thickn_amo)-(long)(p)),100,0,0,-1,-1,-1,1,"thickn_amo=",0,"and of amorphous radiator foil [mm]");
   G__memvar_setup((void*)((long)(&p->Theta)-(long)(p)),100,0,0,-1,-1,-1,1,"Theta=",0,"lattice orientation Theta in [rad]");
   G__memvar_setup((void*)((long)(&p->Alpha)-(long)(p)),100,0,0,-1,-1,-1,1,"Alpha=",0,"lattice orientation Alpha in [rad]");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),100,0,0,-1,-1,-1,1,"Phi=",0,"lattice orientation Phi in [rad]");
   G__memvar_setup((void*)((long)(&p->E0)-(long)(p)),100,0,0,-1,-1,-1,1,"E0=",0,"electron energy in [MeV]");
   G__memvar_setup((void*)((long)(&p->sigE0)-(long)(p)),100,0,0,-1,-1,-1,1,"sigE0=",0,"variance electron energy in [MeV]");
   G__memvar_setup((void*)((long)(&p->sigx)-(long)(p)),100,0,0,-1,-1,-1,1,"sigx=",0,"horizontal beam spot size in  [m]");
   G__memvar_setup((void*)((long)(&p->sigy)-(long)(p)),100,0,0,-1,-1,-1,1,"sigy=",0,"vertical beam spot size in  [m]");
   G__memvar_setup((void*)((long)(&p->sigpx)-(long)(p)),100,0,0,-1,-1,-1,1,"sigpx=",0,"horizontal beam divergence in [rad]");
   G__memvar_setup((void*)((long)(&p->sigpy)-(long)(p)),100,0,0,-1,-1,-1,1,"sigpy=",0,"vertical beam divergence in [rad]");
   G__memvar_setup((void*)((long)(&p->coldist)-(long)(p)),100,0,0,-1,-1,-1,1,"coldist=",0,"distance radiator-collimator in [m]");
   G__memvar_setup((void*)((long)(&p->collength)-(long)(p)),100,0,0,-1,-1,-1,1,"collength=",0,"length of collimator in [m]");
   G__memvar_setup((void*)((long)(&p->col1)-(long)(p)),100,0,0,-1,-1,-1,1,"col1=",0,"hcol==0: zyl_colli :: hcol>1 box_colli");
   G__memvar_setup((void*)((long)(&p->col2)-(long)(p)),100,0,0,-1,-1,-1,1,"col2=",0,"zyl_colli:  col1=rcol, col2=nan  in [m]");
   G__memvar_setup((void*)((long)(&p->coloff_x)-(long)(p)),100,0,0,-1,-1,-1,1,"coloff_x=",0,"(off-axis) collimator offset: x in [m]");
   G__memvar_setup((void*)((long)(&p->coloff_y)-(long)(p)),100,0,0,-1,-1,-1,1,"coloff_y=",0,"(off-axis) collimator offset: y in [m]");
   G__memvar_setup((void*)((long)(&p->KLMax)-(long)(p)),105,0,0,-1,-1,-1,1,"KLMax=",0,"Max Lattice vector used");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),100,0,0,-1,-1,-1,1,"temperature=",0,"temperature of diamond in [K]");
   G__memvar_setup((void*)((long)(&p->IntTot)-(long)(p)),100,0,0,-1,-1,-1,1,"IntTot=",0,"maximal intensity for MC integral");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictMCBInpLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardictMCBInp() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTUserMCBInp(void) {
   /* TUserMCBInp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp));
   G__memfunc_setup("TUserMCBInp",1004,G__dictMCBInp_168_0_1, 105, G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dictMCBInp_168_0_2, 85, G__get_linked_tagnum(&G__dictMCBInpLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TUserMCBInp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dictMCBInp_168_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TUserMCBInp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dictMCBInp_168_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TUserMCBInp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dictMCBInp_168_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TUserMCBInp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictMCBInpLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dictMCBInp_168_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dictMCBInp_168_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TUserMCBInp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dictMCBInp_168_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TUserMCBInp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dictMCBInp_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TUserMCBInp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dictMCBInp_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TUserMCBInp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TUserMCBInp", 1004, G__dictMCBInp_168_0_14, (int) ('i'), G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp), -1, 0, 1, 1, 1, 0, "u 'TUserMCBInp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TUserMCBInp", 1130, G__dictMCBInp_168_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dictMCBInp_168_0_16, (int) ('u'), G__get_linked_tagnum(&G__dictMCBInpLN_TUserMCBInp), -1, 1, 1, 1, 1, 0, "u 'TUserMCBInp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdictMCBInp() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldictMCBInp() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdictMCBInp() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dictMCBInpLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictMCBInpLN_TUserMCBInp = { "TUserMCBInp" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledictMCBInp() {
  G__dictMCBInpLN_TClass.tagnum = -1 ;
  G__dictMCBInpLN_TBuffer.tagnum = -1 ;
  G__dictMCBInpLN_TMemberInspector.tagnum = -1 ;
  G__dictMCBInpLN_TObject.tagnum = -1 ;
  G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__dictMCBInpLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__dictMCBInpLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictMCBInpLN_TUserMCBInp.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledictMCBInp() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_TClass);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_TObject);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictMCBInpLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictMCBInpLN_TUserMCBInp),sizeof(TUserMCBInp),-1,29952,(char*)NULL,G__setup_memvarTUserMCBInp,G__setup_memfuncTUserMCBInp);
}
extern "C" void G__cpp_setupdictMCBInp(void) {
  G__check_setup_version(30051515,"G__cpp_setupdictMCBInp()");
  G__set_cpp_environmentdictMCBInp();
  G__cpp_setup_tagtabledictMCBInp();

  G__cpp_setup_inheritancedictMCBInp();

  G__cpp_setup_typetabledictMCBInp();

  G__cpp_setup_memvardictMCBInp();

  G__cpp_setup_memfuncdictMCBInp();
  G__cpp_setup_globaldictMCBInp();
  G__cpp_setup_funcdictMCBInp();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdictMCBInp();
  return;
}
class G__cpp_setup_initdictMCBInp {
  public:
    G__cpp_setup_initdictMCBInp() { G__add_setup_func("dictMCBInp",(G__incsetup)(&G__cpp_setupdictMCBInp)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdictMCBInp() { G__remove_setup_func("dictMCBInp"); }
};
G__cpp_setup_initdictMCBInp G__cpp_setup_initializerdictMCBInp;

